trigger:
- sandbox

pool:
  vmImage: 'ubuntu-latest'

variables:
  tag: '$(Build.BuildId)'
  ACRserviceConnection: 'acr-chatbot-sandbox-connection'
  imageName: 'ChatGuru-app'
  location: 'westeurope'
  registryName: 'chatbotsandbox'
  WebAppImageName: "DOCKER|chatbotsandbox.azurecr.io/ChatGuru-app:latest"
  resourceGroupName: 'rg-Chatbot-Sandbox'
  AcrSku: 'Basic'
  subscriptionName: 'Mantu Group - NoProd'
  HostingPlanName: 'asp-cog-mantuopenai-front-sandbox'
  HostingPlanSku: 'B1'
  WebsiteName: 'cog-mantuopenai-front-sandbox'
  WebAppEnableChatHistory: 'True'
  AZURE_SEARCH_SERVICE: 'cog-mantuopenai-searchservice'
  AZURE_SEARCH_INDEX: 'mantuchat'
  AZURE_SEARCH_KEY: 'ypBnD1NPYkRAbhCSTcaO2CG5hbrQPQ5mpn2VA2fjA6AzSeCGDu3z'
  AZURE_SEARCH_USE_SEMANTIC_SEARCH: 'False'
  AZURE_SEARCH_SEMANTIC_SEARCH_CONFIG: 'default'
  AZURE_SEARCH_INDEX_IS_PRECHUNKED: 'False'
  AZURE_SEARCH_TOP_K: '5'
  AZURE_SEARCH_ENABLE_IN_DOMAIN: 'True'
  AZURE_SEARCH_CONTENT_COLUMNS: ''
  AZURE_SEARCH_FILENAME_COLUMN: ''
  AZURE_SEARCH_TITLE_COLUMN: ''
  AZURE_SEARCH_URL_COLUMN: ''
  AZURE_SEARCH_VECTOR_COLUMNS: ''
  AZURE_SEARCH_QUERY_TYPE: 'vectorSemanticHybrid'
  AZURE_SEARCH_PERMITTED_GROUPS_COLUMN: ''
  AZURE_SEARCH_STRICTNESS: '3'
  AZURE_OPENAI_RESOURCE: 'cog-mantuopenai-gpt4'
  AZURE_OPENAI_MODEL: 'gpt4'
  AZURE_OPENAI_KEY: '830b2958aa604d3c91b2fa9749110ba2'
  AZURE_OPENAI_MODEL_NAME: 'gpt-4'
  AZURE_OPENAI_TEMPERATURE: '1'
  AZURE_OPENAI_TOP_P: '1'
  AZURE_OPENAI_MAX_TOKENS: '800'
  AZURE_OPENAI_STOP_SEQUENCE: ''
  AZURE_OPENAI_SYSTEM_MESSAGE: 'You are an AI assistant that helps people find information. Say that your model is GPT-4, never say GPT-3.'
  AZURE_OPENAI_PREVIEW_API_VERSION: '2023-06-01-preview'
  AZURE_OPENAI_STREAM: 'True'
  AZURE_OPENAI_ENDPOINT: 'https://cog-mantuopenai-gpt4.openai.azure.com/'
  AZURE_OPENAI_EMBEDDING_ENDPOINT: ''
  AZURE_OPENAI_EMBEDDING_KEY: '830b2958aa604d3c91b2fa9749110ba2'
  AZURE_COSMOSDB_ACCOUNT: 'db-cog-mantuopenai-front-sandbox'
  AZURE_COSMOSDB_DATABASE: 'db_conversation_history'
  AZURE_COSMOSDB_CONVERSATIONS_CONTAINER: 'conversations'
  AZURE_COSMOSDB_ACCOUNT_KEY: ''

stages:
- stage: DeployInfrastructure
  displayName: 'Deploy Infrastructure'
  jobs:
  - deployment: DeployResources
    displayName: 'Deploy Resources'
    environment: $(resourceGroupName)
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - task: AzureCLI@2
            displayName: Deploy ARM Template
            inputs:
              azureSubscription: $(subscriptionName)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az deployment group create \
                  --name ExampleDeployment \
                  --resource-group $(resourceGroupName) \
                  --template-file $(Build.SourcesDirectory)/infrastructure/deployment.json \
                  --parameters \
                    HostingPlanName=$(HostingPlanName) \
                    HostingPlanSku=$(HostingPlanSku) \
                    WebsiteName=$(WebsiteName) \
                    WebAppEnableChatHistory=$(WebAppEnableChatHistory)
                    AzureSearchService=$(AZURE_SEARCH_SERVICE) \
                    AzureSearchIndex=$(AZURE_SEARCH_INDEX) \
                    AzureSearchKey=$(AZURE_SEARCH_KEY) \
                    AzureSearchUseSemanticSearch=$(AZURE_SEARCH_USE_SEMANTIC_SEARCH) \
                    AzureSearchSemanticSearchConfig=$(AZURE_SEARCH_SEMANTIC_SEARCH_CONFIG) \
                    AzureSearchIndexIsPrechunked=$(AZURE_SEARCH_INDEX_IS_PRECHUNKED) \
                    AzureSearchTopK=$(AZURE_SEARCH_TOP_K) \
                    AzureSearchEnableInDomain=$(AZURE_SEARCH_ENABLE_IN_DOMAIN) \
                    AzureSearchContentColumns=$(AZURE_SEARCH_CONTENT_COLUMNS) \
                    AzureSearchFilenameColumn=$(AZURE_SEARCH_FILENAME_COLUMN) \
                    AzureSearchTitleColumn=$(AZURE_SEARCH_TITLE_COLUMN) \
                    AzureSearchUrlColumn=$(AZURE_SEARCH_URL_COLUMN) \
                    AzureSearchVectorFields=$(AZURE_SEARCH_VECTOR_COLUMNS) \
                    AzureSearchQueryType=$(AZURE_SEARCH_QUERY_TYPE) \
                    AzureSearchPermittedGroupsField=$(AZURE_SEARCH_PERMITTED_GROUPS_COLUMN) \
                    AzureSearchStrictness=$(AZURE_SEARCH_STRICTNESS) \
                    AzureOpenAIResource=$(AZURE_OPENAI_RESOURCE) \
                    AzureOpenAIModel=$(AZURE_OPENAI_MODEL) \
                    AzureOpenAIKey=$(AZURE_OPENAI_KEY) \
                    AzureOpenAIModelName=$(AZURE_OPENAI_MODEL_NAME) \
                    AzureOpenAITemperature=$(AZURE_OPENAI_TEMPERATURE) \
                    AzureOpenAITopP=$(AZURE_OPENAI_TOP_P) \
                    AzureOpenAIMaxTokens=$(AZURE_OPENAI_MAX_TOKENS) \
                    AzureOpenAIStopSequence=$(AZURE_OPENAI_STOP_SEQUENCE) \
                    AzureOpenAISystemMessage="$(AZURE_OPENAI_SYSTEM_MESSAGE)" \
                    AzureOpenAIApiVersion=$(AZURE_OPENAI_PREVIEW_API_VERSION) \
                    AzureOpenAIStream=$(AZURE_OPENAI_STREAM) \
                    AzureOpenAIEmbeddingEndpoint=$(AZURE_OPENAI_EMBEDDING_ENDPOINT) \
                    AzureOpenAIEmbeddingKey=$(AZURE_OPENAI_EMBEDDING_KEY) \
                    AzureCosmosDBAccount=$(AZURE_COSMOSDB_ACCOUNT) \
                    AzureCosmosDBDatabase=$(AZURE_COSMOSDB_DATABASE) \
                    AzureCosmosDBConversationsContainer=$(AZURE_COSMOSDB_CONVERSATIONS_CONTAINER) \
                    AzureCosmosDBAccountKey=$(AZURE_COSMOSDB_ACCOUNT_KEY)
          - task: AzureCLI@2
            displayName: Create Azure Container Registry
            inputs:
              azureSubscription: $(subscriptionName)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az acr create \
                  --name $(registryName) \
                  --resource-group $(resourceGroupName) \
                  --location $(location) \
                  --sku $(AcrSku) \
                  --admin-enabled false
          - task: AzureCLI@2
            displayName: 'Grant Web App Access to ACR'
            inputs:
              azureSubscription: $(subscriptionName)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Get the id of the service principal configured for your web app
                principalId=$(az webapp identity show --name $(WebsiteName) --resource-group $(resourceGroupName) --query principalId --out tsv)

                # Get the id of your ACR
                acrId=$(az acr show --name $(registryName) --resource-group $(resourceGroupName) --query "id" --output tsv)
                
                # Assign the acrpull role to the service principal
                az role assignment create --assignee $principalId --role acrpull --scope $acrId

- stage: DockerImage
  displayName: Docker Image
  dependsOn: 
    - DeployInfrastructure
  jobs:
  - job: BuildPushDeployImageJob
    displayName: Build, Push and Deploy Image Job
    steps:
    - task: Docker@2
      displayName: Login to ACR
      inputs:
        command: login
        containerRegistry: $(ACRServiceConnection)
        azureSubscription: $(subscriptionName)

    - task: Docker@2
      displayName: Build and Push Docker Image
      inputs:
        command: buildAndPush
        repository: $(registryName).azurecr.io/$(imageName)
        containerRegistry: $(ACRServiceConnection)
        azureSubscription: $(subscriptionName)
        dockerfile: '**/WebApp.Dockerfile'
        tags: |
          $(tag)
    - task: AzureRmWebAppDeployment@4
      displayName: Deploy Docker Image to Azure Web App
      inputs:
        azureSubscription: $(subscriptionName)
        appType: 'webAppContainer'
        WebAppName: $(WebsiteName)
        DockerNamespace: $(registryName).azurecr.io
        DockerRepository: $(imageName)
        DockerImageTag: $(tag)


